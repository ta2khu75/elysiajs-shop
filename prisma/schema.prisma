// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]

  @@map("roles")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  locked   Boolean   @default(false)
  role     Role      @relation(fields: [roleId], references: [id])
  roleId   Int
  products Product[]
  addresss Address[]

  @@map("users")
}

model Address {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  phone   String
  address String
  default Boolean @default(false)
  order   Order[]

  @@map("addresss")
}

model Product {
  id            Int            @id @default(autoincrement())
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    Int
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  name          String
  thumbnail     String
  active        Boolean        @default(true)
  options       Option[]
  sizes         Size[]
  productImages ProductImage[]

  @@map("products")
}

model Warehouse {
  id               Int            @id @default(autoincrement())
  productDetails   ProductDetails @relation(fields: [productDetailsId], references: [id])
  productDetailsId Int            @unique
  remaining        Int

  @@map("Warehouse")
}

model ProductDetails {
  id              Int            @id @default(autoincrement())
  option          Option?        @relation(fields: [optionId], references: [id])
  optionId        Int?
  size            Size?          @relation(fields: [sizeId], references: [id])
  sizeId          Int?
  price           Decimal
  numberOfProduct Warehouse?
  orderDetails    OrderDetails[]

  @@map("product_details")
}

model Option {
  id             Int              @id @default(autoincrement())
  product        Product          @relation(fields: [productId], references: [id])
  productId      Int
  name           String
  productDetails ProductDetails[]

  @@map("options")
}

model Size {
  id             Int              @id @default(autoincrement())
  product        Product          @relation(fields: [productId], references: [id])
  productId      Int
  name           String
  productDetails ProductDetails[]

  @@map("sizes")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  image     String
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("product_images")
}

model Order {
  id           Int            @id @default(autoincrement())
  address      Address        @relation(fields: [addressId], references: [id])
  addressId    Int
  note         String
  status       OrderStatus    @default(PENDING)
  orderDetails OrderDetails[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderDetails {
  id               Int            @id @default(autoincrement())
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          Int
  productDetails   ProductDetails @relation(fields: [productDetailsId], references: [id])
  productDetailsId Int
  quantity         Int            @default(1)

  @@map("order_detailss")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("categories")
}
